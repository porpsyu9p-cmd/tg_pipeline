const axios = require('axios');

const TRANSLATION_SERVICE_URL = process.env.TRANSLATION_SERVICE_URL || 'http://localhost:3001';

async function testTranslation() {
  console.log('üß™ Testing Translation Service');
  console.log('='.repeat(50));
  
  const testTexts = [
    '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?',
    '–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞!',
    '–Ø –∏–∑—É—á–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ JavaScript.',
    '–≠—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.',
    '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!'
  ];
  
  try {
    // –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
    console.log('\n1. Testing service health...');
    const healthResponse = await axios.get(`${TRANSLATION_SERVICE_URL}/health`);
    console.log('‚úÖ Service is healthy:', healthResponse.data);
    
    // –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('\n2. Getting service config...');
    const configResponse = await axios.get(`${TRANSLATION_SERVICE_URL}/config`);
    console.log('üìù Config:', configResponse.data);
    
    // –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    console.log('\n3. Testing single translation...');
    for (let i = 0; i < testTexts.length; i++) {
      const text = testTexts[i];
      console.log(`\n${i + 1}. Original: ${text}`);
      
      const response = await axios.post(`${TRANSLATION_SERVICE_URL}/translate`, {
        text: text,
        targetLanguage: 'English'
      });
      
      if (response.data.success) {
        console.log(`   Translated: ${response.data.translated}`);
      } else {
        console.log(`   ‚ùå Error: ${response.data.error}`);
      }
    }
    
    // –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    console.log('\n4. Testing batch translation...');
    const batchResponse = await axios.post(`${TRANSLATION_SERVICE_URL}/translate/batch`, {
      texts: testTexts,
      targetLanguage: 'English'
    });
    
    if (batchResponse.data.success) {
      console.log(`‚úÖ Batch translation completed:`);
      console.log(`   Total: ${batchResponse.data.total}`);
      console.log(`   Successful: ${batchResponse.data.successful}`);
      
      batchResponse.data.results.forEach((result, index) => {
        if (result.success) {
          console.log(`   ${index + 1}. ${result.original} -> ${result.translated}`);
        } else {
          console.log(`   ${index + 1}. ‚ùå ${result.original} (${result.error})`);
        }
      });
    } else {
      console.log(`‚ùå Batch translation failed: ${batchResponse.data.error}`);
    }
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    if (error.response) {
      console.error('Response data:', error.response.data);
    }
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('‚úÖ Testing completed');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testTranslation().catch(console.error);
